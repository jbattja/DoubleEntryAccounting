{
  "$schema": "https://json.schemastore.org/web-types",
  "name": "@vaadin/grid",
  "version": "24.0.0-alpha7",
  "description-markup": "markdown",
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "vaadin-grid-column",
          "description": "A `<vaadin-grid-column>` is used to configure how a column in `<vaadin-grid>`\nshould look like.\n\nSee [`<vaadin-grid>`](https://cdn.vaadin.com/vaadin-web-components/24.0.0-alpha7/#/elements/vaadin-grid) documentation for instructions on how\nto configure the `<vaadin-grid-column>`.",
          "attributes": [
            {
              "name": "resizable",
              "description": "When set to true, the column is user-resizable.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "frozen",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "frozen-to-end",
              "description": "When true, the column is frozen to end of grid.\n\nWhen a column inside of a column group is frozen to end, all of the sibling columns\ninside the group will get frozen to end also.\n\nColumn can not be set as `frozen` and `frozenToEnd` at the same time.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "hidden",
              "description": "When set to true, the cells for this column are hidden.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "header",
              "description": "Text content to display in the header cell of the column.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "text-align",
              "description": "Aligns the columns cell content horizontally.\nSupported values: \"start\", \"center\" and \"end\".",
              "value": {
                "type": [
                  "GridColumnTextAlign",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "width",
              "description": "Width of the cells for this column.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "flex-grow",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "value": {
                "type": [
                  "number"
                ]
              }
            },
            {
              "name": "path",
              "description": "Path to an item sub-property whose value gets displayed in the column body cells.\nThe property name is also shown in the column header if an explicit header or renderer isn't defined.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "auto-width",
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `flexGrow` is not 0.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "theme",
              "description": "The theme variants to apply to the component.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            }
          ],
          "js": {
            "properties": [
              {
                "name": "resizable",
                "description": "When set to true, the column is user-resizable.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "frozen",
                "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "frozenToEnd",
                "description": "When true, the column is frozen to end of grid.\n\nWhen a column inside of a column group is frozen to end, all of the sibling columns\ninside the group will get frozen to end also.\n\nColumn can not be set as `frozen` and `frozenToEnd` at the same time.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "hidden",
                "description": "When set to true, the cells for this column are hidden.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "header",
                "description": "Text content to display in the header cell of the column.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "textAlign",
                "description": "Aligns the columns cell content horizontally.\nSupported values: \"start\", \"center\" and \"end\".",
                "value": {
                  "type": [
                    "GridColumnTextAlign",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "headerRenderer",
                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
                "value": {
                  "type": [
                    "GridHeaderFooterRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "footerRenderer",
                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
                "value": {
                  "type": [
                    "GridHeaderFooterRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "width",
                "description": "Width of the cells for this column.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "flexGrow",
                "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
                "value": {
                  "type": [
                    "number"
                  ]
                }
              },
              {
                "name": "renderer",
                "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
                "value": {
                  "type": [
                    "GridBodyRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "path",
                "description": "Path to an item sub-property whose value gets displayed in the column body cells.\nThe property name is also shown in the column header if an explicit header or renderer isn't defined.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "autoWidth",
                "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `flexGrow` is not 0.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              }
            ],
            "events": []
          }
        },
        {
          "name": "vaadin-grid-filter",
          "description": "`<vaadin-grid-filter>` is a helper element for the `<vaadin-grid>` that provides out-of-the-box UI controls,\nand handlers for filtering the grid data.\n\n#### Example:\n```html\n<vaadin-grid-column id=\"column\"></vaadin-grid-column>\n```\n```js\nconst column = document.querySelector('#column');\ncolumn.headerRenderer = (root, column) => {\n  let filter = root.firstElementChild;\n  if (!filter) {\n    filter = document.createElement('vaadin-grid-filter');\n    root.appendChild(filter);\n  }\n  filter.path = 'name.first';\n};\ncolumn.renderer = (root, column, model) => {\n  root.textContent = model.item.name.first;\n};\n```",
          "attributes": [
            {
              "name": "path",
              "description": "JS Path of the property in the item used for filtering the data.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "value",
              "description": "Current filter value.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "theme",
              "description": "The theme variants to apply to the component.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            }
          ],
          "js": {
            "properties": [
              {
                "name": "path",
                "description": "JS Path of the property in the item used for filtering the data.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "value",
                "description": "Current filter value.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              }
            ],
            "events": [
              {
                "name": "value-changed",
                "description": "Fired when the `value` property changes."
              }
            ]
          }
        },
        {
          "name": "vaadin-grid-filter-column",
          "description": "`<vaadin-grid-filter-column>` is a helper element for the `<vaadin-grid>`\nthat provides default header renderer and functionality for filtering.\n\n#### Example:\n```html\n<vaadin-grid items=\"[[items]]\">\n <vaadin-grid-filter-column path=\"name.first\"></vaadin-grid-filter-column>\n\n <vaadin-grid-column>\n   ...\n```",
          "attributes": [
            {
              "name": "resizable",
              "description": "When set to true, the column is user-resizable.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "frozen",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "frozen-to-end",
              "description": "When true, the column is frozen to end of grid.\n\nWhen a column inside of a column group is frozen to end, all of the sibling columns\ninside the group will get frozen to end also.\n\nColumn can not be set as `frozen` and `frozenToEnd` at the same time.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "hidden",
              "description": "When set to true, the cells for this column are hidden.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "header",
              "description": "Text to display as the label of the column filter text-field.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "text-align",
              "description": "Aligns the columns cell content horizontally.\nSupported values: \"start\", \"center\" and \"end\".",
              "value": {
                "type": [
                  "GridColumnTextAlign",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "width",
              "description": "Width of the cells for this column.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "flex-grow",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "value": {
                "type": [
                  "number"
                ]
              }
            },
            {
              "name": "path",
              "description": "JS Path of the property in the item used for filtering the data.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "auto-width",
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `flexGrow` is not 0.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "theme",
              "description": "The theme variants to apply to the component.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            }
          ],
          "js": {
            "properties": [
              {
                "name": "resizable",
                "description": "When set to true, the column is user-resizable.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "frozen",
                "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "frozenToEnd",
                "description": "When true, the column is frozen to end of grid.\n\nWhen a column inside of a column group is frozen to end, all of the sibling columns\ninside the group will get frozen to end also.\n\nColumn can not be set as `frozen` and `frozenToEnd` at the same time.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "hidden",
                "description": "When set to true, the cells for this column are hidden.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "header",
                "description": "Text to display as the label of the column filter text-field.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "textAlign",
                "description": "Aligns the columns cell content horizontally.\nSupported values: \"start\", \"center\" and \"end\".",
                "value": {
                  "type": [
                    "GridColumnTextAlign",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "headerRenderer",
                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
                "value": {
                  "type": [
                    "GridHeaderFooterRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "footerRenderer",
                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
                "value": {
                  "type": [
                    "GridHeaderFooterRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "width",
                "description": "Width of the cells for this column.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "flexGrow",
                "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
                "value": {
                  "type": [
                    "number"
                  ]
                }
              },
              {
                "name": "renderer",
                "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
                "value": {
                  "type": [
                    "GridBodyRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "path",
                "description": "JS Path of the property in the item used for filtering the data.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "autoWidth",
                "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `flexGrow` is not 0.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              }
            ],
            "events": []
          }
        },
        {
          "name": "vaadin-grid-selection-column",
          "description": "`<vaadin-grid-selection-column>` is a helper element for the `<vaadin-grid>`\nthat provides default renderers and functionality for item selection.\n\n#### Example:\n```html\n<vaadin-grid items=\"[[items]]\">\n <vaadin-grid-selection-column frozen auto-select></vaadin-grid-selection-column>\n\n <vaadin-grid-column>\n   ...\n```\n\nBy default the selection column displays `<vaadin-checkbox>` elements in the\ncolumn cells. The checkboxes in the body rows toggle selection of the corresponding row items.\n\nWhen the grid data is provided as an array of [`items`](https://cdn.vaadin.com/vaadin-web-components/24.0.0-alpha7/#/elements/vaadin-grid#property-items),\nthe column header gets an additional checkbox that can be used for toggling\nselection for all the items at once.\n\n__The default content can also be overridden__",
          "attributes": [
            {
              "name": "resizable",
              "description": "When set to true, the column is user-resizable.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "frozen",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "frozen-to-end",
              "description": "When true, the column is frozen to end of grid.\n\nWhen a column inside of a column group is frozen to end, all of the sibling columns\ninside the group will get frozen to end also.\n\nColumn can not be set as `frozen` and `frozenToEnd` at the same time.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "hidden",
              "description": "When set to true, the cells for this column are hidden.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "header",
              "description": "Text content to display in the header cell of the column.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "text-align",
              "description": "Aligns the columns cell content horizontally.\nSupported values: \"start\", \"center\" and \"end\".",
              "value": {
                "type": [
                  "GridColumnTextAlign",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "width",
              "description": "Width of the cells for this column.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "flex-grow",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "value": {
                "type": [
                  "number"
                ]
              }
            },
            {
              "name": "path",
              "description": "Path to an item sub-property whose value gets displayed in the column body cells.\nThe property name is also shown in the column header if an explicit header or renderer isn't defined.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "auto-width",
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `flexGrow` is not 0.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "select-all",
              "description": "When true, all the items are selected.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "auto-select",
              "description": "When true, the active gets automatically selected.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "theme",
              "description": "The theme variants to apply to the component.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            }
          ],
          "js": {
            "properties": [
              {
                "name": "resizable",
                "description": "When set to true, the column is user-resizable.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "frozen",
                "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "frozenToEnd",
                "description": "When true, the column is frozen to end of grid.\n\nWhen a column inside of a column group is frozen to end, all of the sibling columns\ninside the group will get frozen to end also.\n\nColumn can not be set as `frozen` and `frozenToEnd` at the same time.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "hidden",
                "description": "When set to true, the cells for this column are hidden.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "header",
                "description": "Text content to display in the header cell of the column.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "textAlign",
                "description": "Aligns the columns cell content horizontally.\nSupported values: \"start\", \"center\" and \"end\".",
                "value": {
                  "type": [
                    "GridColumnTextAlign",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "headerRenderer",
                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
                "value": {
                  "type": [
                    "GridHeaderFooterRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "footerRenderer",
                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
                "value": {
                  "type": [
                    "GridHeaderFooterRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "width",
                "description": "Width of the cells for this column.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "flexGrow",
                "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
                "value": {
                  "type": [
                    "number"
                  ]
                }
              },
              {
                "name": "renderer",
                "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
                "value": {
                  "type": [
                    "GridBodyRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "path",
                "description": "Path to an item sub-property whose value gets displayed in the column body cells.\nThe property name is also shown in the column header if an explicit header or renderer isn't defined.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "autoWidth",
                "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `flexGrow` is not 0.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "selectAll",
                "description": "When true, all the items are selected.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "autoSelect",
                "description": "When true, the active gets automatically selected.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              }
            ],
            "events": [
              {
                "name": "select-all-changed",
                "description": "Fired when the `selectAll` property changes."
              }
            ]
          }
        },
        {
          "name": "vaadin-grid-sorter",
          "description": "`<vaadin-grid-sorter>` is a helper element for the `<vaadin-grid>` that provides out-of-the-box UI controls,\nvisual feedback, and handlers for sorting the grid data.\n\n#### Example:\n```html\n<vaadin-grid-column id=\"column\"></vaadin-grid-column>\n```\n```js\nconst column = document.querySelector('#column');\ncolumn.renderer = (root, column, model) => {\n  let sorter = root.firstElementChild;\n  if (!sorter) {\n    sorter = document.createElement('vaadin-grid-sorter');\n    root.appendChild(sorter);\n  }\n  sorter.path = 'name.first';\n};\n```\n\n### Styling\n\nThe following shadow DOM parts are available for styling:\n\nPart name | Description\n----------------|----------------\n`content` | The slotted content wrapper\n`indicators` | The internal sorter indicators.\n`order` | The internal sorter order\n\nThe following state attributes are available for styling:\n\nAttribute    | Description | Part name\n-------------|-------------|------------\n`direction` | Sort direction of a sorter | :host",
          "attributes": [
            {
              "name": "path",
              "description": "JS Path of the property in the item used for sorting the data.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "direction",
              "description": "How to sort the data.\nPossible values are `asc` to use an ascending algorithm, `desc` to sort the data in\ndescending direction, or `null` for not sorting the data.",
              "value": {
                "type": [
                  "GridSorterDirection",
                  "undefined"
                ]
              }
            },
            {
              "name": "theme",
              "description": "The theme variants to apply to the component.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            }
          ],
          "js": {
            "properties": [
              {
                "name": "path",
                "description": "JS Path of the property in the item used for sorting the data.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "direction",
                "description": "How to sort the data.\nPossible values are `asc` to use an ascending algorithm, `desc` to sort the data in\ndescending direction, or `null` for not sorting the data.",
                "value": {
                  "type": [
                    "GridSorterDirection",
                    "undefined"
                  ]
                }
              }
            ],
            "events": [
              {
                "name": "direction-changed",
                "description": "Fired when the `direction` property changes."
              }
            ]
          }
        },
        {
          "name": "vaadin-grid-sort-column",
          "description": "`<vaadin-grid-sort-column>` is a helper element for the `<vaadin-grid>`\nthat provides default header renderer and functionality for sorting.\n\n#### Example:\n```html\n<vaadin-grid items=\"[[items]]\">\n <vaadin-grid-sort-column path=\"name.first\" direction=\"asc\"></vaadin-grid-sort-column>\n\n <vaadin-grid-column>\n   ...\n```",
          "attributes": [
            {
              "name": "resizable",
              "description": "When set to true, the column is user-resizable.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "frozen",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "frozen-to-end",
              "description": "When true, the column is frozen to end of grid.\n\nWhen a column inside of a column group is frozen to end, all of the sibling columns\ninside the group will get frozen to end also.\n\nColumn can not be set as `frozen` and `frozenToEnd` at the same time.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "hidden",
              "description": "When set to true, the cells for this column are hidden.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "header",
              "description": "Text content to display in the header cell of the column.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "text-align",
              "description": "Aligns the columns cell content horizontally.\nSupported values: \"start\", \"center\" and \"end\".",
              "value": {
                "type": [
                  "GridColumnTextAlign",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "width",
              "description": "Width of the cells for this column.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "flex-grow",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "value": {
                "type": [
                  "number"
                ]
              }
            },
            {
              "name": "path",
              "description": "JS Path of the property in the item used for sorting the data.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "auto-width",
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `flexGrow` is not 0.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "direction",
              "description": "How to sort the data.\nPossible values are `asc` to use an ascending algorithm, `desc` to sort the data in\ndescending direction, or `null` for not sorting the data.",
              "value": {
                "type": [
                  "GridSorterDirection",
                  "undefined"
                ]
              }
            },
            {
              "name": "theme",
              "description": "The theme variants to apply to the component.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            }
          ],
          "js": {
            "properties": [
              {
                "name": "resizable",
                "description": "When set to true, the column is user-resizable.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "frozen",
                "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "frozenToEnd",
                "description": "When true, the column is frozen to end of grid.\n\nWhen a column inside of a column group is frozen to end, all of the sibling columns\ninside the group will get frozen to end also.\n\nColumn can not be set as `frozen` and `frozenToEnd` at the same time.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "hidden",
                "description": "When set to true, the cells for this column are hidden.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "header",
                "description": "Text content to display in the header cell of the column.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "textAlign",
                "description": "Aligns the columns cell content horizontally.\nSupported values: \"start\", \"center\" and \"end\".",
                "value": {
                  "type": [
                    "GridColumnTextAlign",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "headerRenderer",
                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
                "value": {
                  "type": [
                    "GridHeaderFooterRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "footerRenderer",
                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
                "value": {
                  "type": [
                    "GridHeaderFooterRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "width",
                "description": "Width of the cells for this column.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "flexGrow",
                "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
                "value": {
                  "type": [
                    "number"
                  ]
                }
              },
              {
                "name": "renderer",
                "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
                "value": {
                  "type": [
                    "GridBodyRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "path",
                "description": "JS Path of the property in the item used for sorting the data.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "autoWidth",
                "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `flexGrow` is not 0.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "direction",
                "description": "How to sort the data.\nPossible values are `asc` to use an ascending algorithm, `desc` to sort the data in\ndescending direction, or `null` for not sorting the data.",
                "value": {
                  "type": [
                    "GridSorterDirection",
                    "undefined"
                  ]
                }
              }
            ],
            "events": [
              {
                "name": "direction-changed",
                "description": "Fired when the `direction` property changes."
              }
            ]
          }
        },
        {
          "name": "vaadin-grid-tree-toggle",
          "description": "`<vaadin-grid-tree-toggle>` is a helper element for the `<vaadin-grid>`\nthat provides toggle and level display functionality for the item tree.\n\n#### Example:\n```html\n<vaadin-grid-column id=\"column\"></vaadin-grid-column>\n```\n```js\nconst column = document.querySelector('#column');\ncolumn.renderer = (root, column, model) => {\n  let treeToggle = root.firstElementChild;\n  if (!treeToggle) {\n    treeToggle = document.createElement('vaadin-grid-tree-toggle');\n    treeToggle.addEventListener('expanded-changed', () => { ... });\n    root.appendChild(treeToggle);\n  }\n  treeToggle.leaf = !model.item.hasChildren;\n  treeToggle.level = level;\n  treeToggle.expanded = expanded;\n  treeToggle.textContent = model.item.name;\n};\n```\n\n### Styling\n\nThe following shadow DOM parts are available for styling:\n\nPart name | Description\n---|---\n`toggle` | The tree toggle icon\n\nThe following state attributes are available for styling:\n\nAttribute    | Description | Part name\n---|---|---\n`expanded` | When present, the toggle is expanded | :host\n`leaf` | When present, the toggle is not expandable, i. e., the current item is a leaf | :host\n\nThe following custom CSS properties are available on\nthe `<vaadin-grid-tree-toggle>` element:\n\nCustom CSS property | Description | Default\n---|---|---\n`--vaadin-grid-tree-toggle-level-offset` | Visual offset step for each tree sublevel | `1em`",
          "attributes": [
            {
              "name": "level",
              "description": "Current level of the tree represented with a horizontal offset\nof the toggle button.",
              "value": {
                "type": [
                  "number"
                ]
              }
            },
            {
              "name": "leaf",
              "description": "Hides the toggle icon and disables toggling a tree sublevel.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "expanded",
              "description": "Sublevel toggle state.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "theme",
              "description": "The theme variants to apply to the component.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            }
          ],
          "js": {
            "properties": [
              {
                "name": "level",
                "description": "Current level of the tree represented with a horizontal offset\nof the toggle button.",
                "value": {
                  "type": [
                    "number"
                  ]
                }
              },
              {
                "name": "leaf",
                "description": "Hides the toggle icon and disables toggling a tree sublevel.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "expanded",
                "description": "Sublevel toggle state.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              }
            ],
            "events": [
              {
                "name": "expanded-changed",
                "description": "Fired when the `expanded` property changes."
              }
            ]
          }
        },
        {
          "name": "vaadin-grid-tree-column",
          "description": "`<vaadin-grid-tree-column>` is a helper element for the `<vaadin-grid>`\nthat provides default renderer and functionality for toggling tree/hierarchical items.\n\n#### Example:\n```html\n<vaadin-grid items=\"[[items]]\">\n <vaadin-grid-tree-column path=\"name.first\"></vaadin-grid-tree-column>\n\n <vaadin-grid-column>\n   ...\n```",
          "attributes": [
            {
              "name": "resizable",
              "description": "When set to true, the column is user-resizable.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "frozen",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "frozen-to-end",
              "description": "When true, the column is frozen to end of grid.\n\nWhen a column inside of a column group is frozen to end, all of the sibling columns\ninside the group will get frozen to end also.\n\nColumn can not be set as `frozen` and `frozenToEnd` at the same time.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "hidden",
              "description": "When set to true, the cells for this column are hidden.",
              "value": {
                "type": [
                  "boolean",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "header",
              "description": "Text content to display in the header cell of the column.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "text-align",
              "description": "Aligns the columns cell content horizontally.\nSupported values: \"start\", \"center\" and \"end\".",
              "value": {
                "type": [
                  "GridColumnTextAlign",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "width",
              "description": "Width of the cells for this column.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "flex-grow",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "value": {
                "type": [
                  "number"
                ]
              }
            },
            {
              "name": "path",
              "description": "JS Path of the property in the item used as text content for the tree toggle.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            },
            {
              "name": "auto-width",
              "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `flexGrow` is not 0.",
              "value": {
                "type": [
                  "boolean"
                ]
              }
            },
            {
              "name": "theme",
              "description": "The theme variants to apply to the component.",
              "value": {
                "type": [
                  "string",
                  "null",
                  "undefined"
                ]
              }
            }
          ],
          "js": {
            "properties": [
              {
                "name": "resizable",
                "description": "When set to true, the column is user-resizable.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "frozen",
                "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "frozenToEnd",
                "description": "When true, the column is frozen to end of grid.\n\nWhen a column inside of a column group is frozen to end, all of the sibling columns\ninside the group will get frozen to end also.\n\nColumn can not be set as `frozen` and `frozenToEnd` at the same time.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              },
              {
                "name": "hidden",
                "description": "When set to true, the cells for this column are hidden.",
                "value": {
                  "type": [
                    "boolean",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "header",
                "description": "Text content to display in the header cell of the column.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "textAlign",
                "description": "Aligns the columns cell content horizontally.\nSupported values: \"start\", \"center\" and \"end\".",
                "value": {
                  "type": [
                    "GridColumnTextAlign",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "headerRenderer",
                "description": "Custom function for rendering the header content.\nReceives two arguments:\n\n- `root` The header cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
                "value": {
                  "type": [
                    "GridHeaderFooterRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "footerRenderer",
                "description": "Custom function for rendering the footer content.\nReceives two arguments:\n\n- `root` The footer cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.",
                "value": {
                  "type": [
                    "GridHeaderFooterRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "width",
                "description": "Width of the cells for this column.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "flexGrow",
                "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
                "value": {
                  "type": [
                    "number"
                  ]
                }
              },
              {
                "name": "renderer",
                "description": "Custom function for rendering the cell content.\nReceives three arguments:\n\n- `root` The cell content DOM element. Append your content to it.\n- `column` The `<vaadin-grid-column>` element.\n- `model` The object with the properties related with\n  the rendered item, contains:\n  - `model.index` The index of the item.\n  - `model.item` The item.\n  - `model.expanded` Sublevel toggle state.\n  - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n  - `model.selected` Selected state.\n  - `model.detailsOpened` Details opened state.",
                "value": {
                  "type": [
                    "GridBodyRenderer",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "path",
                "description": "JS Path of the property in the item used as text content for the tree toggle.",
                "value": {
                  "type": [
                    "string",
                    "null",
                    "undefined"
                  ]
                }
              },
              {
                "name": "autoWidth",
                "description": "Automatically sets the width of the column based on the column contents when this is set to `true`.\n\nFor performance reasons the column width is calculated automatically only once when the grid items\nare rendered for the first time and the calculation only considers the rows which are currently\nrendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\ncontent changes, the column width might not match the contents anymore.\n\nHidden columns are ignored in the calculation and their widths are not automatically updated when\nyou show a column that was initially hidden.\n\nYou can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n\nThe column width may still grow larger when `flexGrow` is not 0.",
                "value": {
                  "type": [
                    "boolean"
                  ]
                }
              }
            ],
            "events": []
          }
        }
      ]
    }
  }
}